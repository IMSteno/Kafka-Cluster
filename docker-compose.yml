version: '2.3'

services:
  zoo1:
    image: zookeeper:3.4.9
    restart: on-failure
    hostname: zoo1
    container_name: zookeeper_server_1
    ports:
      - "2181:2181"
    environment:
        ZOO_MY_ID: 1
        ZOO_PORT: 2181
        ZOO_TICK_TIME: 3000
        ZOO_INIT_LIMIT: 5
        ZOO_SYNC_LIMIT: 3
        ZOO_MAX_CLIENT_CNXNS: 0
        ZOO_STANDALONE_ENABLED: "false"
        ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888
        ZOO_4LW_COMMANDS_WHITELIST: "*"
    volumes:
      - ./USDE-project/zoo1/data:/data
      - ./USDE-project/zoo1/datalog:/datalog
    healthcheck:
      test: "exit 0"
      start_period: 10s
    
  zoo2:
    image: zookeeper:3.4.9
    restart: on-failure
    hostname: zoo2
    container_name: zookeeper_server_2
    ports:
      - "2182:2182"
    environment:
        ZOO_MY_ID: 2
        ZOO_PORT: 2182
        ZOO_TICK_TIME: 3000
        ZOO_INIT_LIMIT: 5
        ZOO_SYNC_LIMIT: 3
        ZOO_MAX_CLIENT_CNXNS: 0
        ZOO_STANDALONE_ENABLED: "false"
        ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888
        ZOO_4LW_COMMANDS_WHITELIST: "*"
    volumes:
      - ./USDE-project/zoo2/data:/data
      - ./USDE-project/zoo2/datalog:/datalog
    healthcheck:
      test: "exit 0"
      start_period: 10s
      
  zoo3:
    image: zookeeper:3.4.9
    restart: on-failure
    hostname: zoo3
    container_name: zookeeper_server_3
    ports:
      - "2183:2183"
    environment:
        ZOO_MY_ID: 3
        ZOO_PORT: 2183
        ZOO_TICK_TIME: 3000
        ZOO_INIT_LIMIT: 5
        ZOO_SYNC_LIMIT: 3
        ZOO_MAX_CLIENT_CNXNS: 0
        ZOO_STANDALONE_ENABLED: "false"
        ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888
        ZOO_4LW_COMMANDS_WHITELIST: "*"
    volumes:
      - ./USDE-project/zoo3/data:/data
      - ./USDE-project/zoo3/datalog:/datalog
    healthcheck:
      test: "exit 0"
      start_period: 10s
  
  zoonavigator:
    image: elkozmon/zoonavigator:latest
    container_name: zoonavigator
    ports:
      - "8004:8000"
    environment:
      HTTP_PORT: 8000
      AUTO_CONNECT_CONNECTION_STRING: zoo1:2181,zoo2:2182,zoo3:2183
    depends_on:
      - zoo1
      - zoo2
      - zoo3
  
  kafka1:
    image: confluentinc/cp-server:6.0.1
    restart: on-failure
    hostname: kafka1
    container_name: kafka_broker_1
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19092,LISTENER_DOCKER_EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181,zoo2:2182,zoo3:2183/kafka"
      KAFKA_BROKER_ID: 1
      KAFKA_LEADER_IMBALANCE_CHECK_INTERVAL: 240
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_AUTO_LEADER_REBALANCE_ENABLE: "true"      
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_COMPRESSION_TYPE: "producer"
      KAFKA_LOG_RETENTION_HOURS: 700
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1      
      KAFKA_REQUEST_TIMEOUT_MS: 60000
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT_MS: 30000
      KAFKA_GROUP_MAX_SIZE: 200
      KAFKA_LOG_CLEANUP_POLICY: "delete"
      KAFKA_LOG_PARTITION: 3
      KAFKA_LOG_RETENTION_BYTES: 134217728
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_CONFLUENT_BALANCER_ENABLE: "true"
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_CONFLUENT_SECURITY_EVENT_LOGGER_EXPORTER_KAFKA_TOPIC_REPLICAS: 3
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka1:19092,kafka2:19093,kafka3:19094
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 3
      CONFLUENT_METRICS_REPORTER_MAX_REQUEST_SIZE: 134217728
      CONFLUENT_METRICS_REPORTER_TOPIC_CREATE: "true"
    volumes:
      - ./USDE-project/kafka1/data:/var/lib/kafka/data
    depends_on:
      zoo1:
        condition: service_healthy
      zoo2:
        condition: service_healthy
      zoo3:
        condition: service_healthy
    healthcheck:
      test: "exit 0"
      interval: 40s
      start_period: 20s
      
  kafka2:
    image: confluentinc/cp-server:6.0.1
    restart: on-failure
    hostname: kafka2
    container_name: kafka_broker_2
    ports:
      - "9093:9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka2:19093,LISTENER_DOCKER_EXTERNAL://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181,zoo2:2182,zoo3:2183/kafka"
      KAFKA_BROKER_ID: 2
      KAFKA_LEADER_IMBALANCE_CHECK_INTERVAL: 240
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_AUTO_LEADER_REBALANCE_ENABLE: "true"      
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"      
      KAFKA_COMPRESSION_TYPE: "producer"
      KAFKA_LOG_RETENTION_HOURS: 700
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_REQUEST_TIMEOUT_MS: 60000
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT_MS: 30000
      KAFKA_GROUP_MAX_SIZE: 200
      KAFKA_LOG_CLEANUP_POLICY: "delete"
      KAFKA_LOG_PARTITION: 3
      KAFKA_LOG_RETENTION_BYTES: 134217728
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_CONFLUENT_BALANCER_ENABLE: "true"
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_CONFLUENT_SECURITY_EVENT_LOGGER_EXPORTER_KAFKA_TOPIC_REPLICAS: 3
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka1:19092,kafka2:19093,kafka3:19094
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 3
      CONFLUENT_METRICS_REPORTER_MAX_REQUEST_SIZE: 134217728
      CONFLUENT_METRICS_REPORTER_TOPIC_CREATE: "true"    
    volumes:
      - ./USDE-project/kafka2/data:/var/lib/kafka/data    
    depends_on:
      zoo1:
        condition: service_healthy
      zoo2:
        condition: service_healthy
      zoo3:
        condition: service_healthy
      kafka1:
        condition: service_started
    healthcheck:
      test: "exit 0"
      interval: 40s
      start_period: 20s

  kafka3:
    image: confluentinc/cp-server:6.0.1
    restart: on-failure
    hostname: kafka3
    container_name: kafka_broker_3
    ports:
      - "9094:9094"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka3:19094,LISTENER_DOCKER_EXTERNAL://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181,zoo2:2182,zoo3:2183/kafka"
      KAFKA_BROKER_ID: 3
      KAFKA_LEADER_IMBALANCE_CHECK_INTERVAL: 240
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_AUTO_LEADER_REBALANCE_ENABLE: "true"      
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_COMPRESSION_TYPE: "producer"
      KAFKA_LOG_RETENTION_HOURS: 700
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_REQUEST_TIMEOUT_MS: 60000
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT_MS: 30000
      KAFKA_GROUP_MAX_SIZE: 200
      KAFKA_LOG_CLEANUP_POLICY: "delete"
      KAFKA_LOG_PARTITION: 3
      KAFKA_LOG_RETENTION_BYTES: 134217728
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_CONFLUENT_BALANCER_ENABLE: "true"
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_CONFLUENT_SECURITY_EVENT_LOGGER_EXPORTER_KAFKA_TOPIC_REPLICAS: 3
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka1:19092,kafka2:19093,kafka3:19094
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 3
      CONFLUENT_METRICS_REPORTER_MAX_REQUEST_SIZE: 134217728
      CONFLUENT_METRICS_REPORTER_TOPIC_CREATE: "true"      
    volumes:
      - ./USDE-project/kafka3/data:/var/lib/kafka/data
    depends_on:
      zoo1:
        condition: service_healthy
      zoo2:
        condition: service_healthy
      zoo3:
        condition: service_healthy
      kafka2:
        condition: service_started
    healthcheck:
      test: "exit 0"
      interval: 40s
      start_period: 20s 
        
  kafka-schema-registry:
    image: confluentinc/cp-schema-registry:6.0.1
    restart: on-failure
    hostname: kafka-schema-registry
    container_name: kafka_schema_registry
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: kafka-schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka1:19092,PLAINTEXT://kafka2:19093,PLAINTEXT://kafka3:19094
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      #This way we are open to all possible schema-registries (AVRO, JSON and Protocol buffers)
      #We are also setting forward and backward compatibility for our schema, from the default only having backward compatibility
      SCHEMA_REGISTRY_SCHEMA_COMPATIBILITY_LEVEL: "full"
      #We want as much information as possible if problems were to arise with the schema-registry.
      SCHEMA_REGISTRY_DEBUG: "true"
    depends_on:
      zoo1:
        condition: service_healthy
      zoo2:
        condition: service_healthy
      zoo3:
        condition: service_healthy
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy        
    healthcheck:
      test: "exit 0"
      interval: 20s
    
  schema-registry-ui:
    image: landoop/schema-registry-ui:0.9.5
    restart: on-failure
    hostname: kafka-schema-registry-ui
    container_name: schema-registry_ui
    ports:
      - "8001:8000"
    environment:
      SCHEMAREGISTRY_URL: http://kafka-schema-registry:8081/
      PROXY: "true"
    depends_on:
      kafka-schema-registry:
        condition: service_started
      
  kafka-rest-proxy:
    image: confluentinc/cp-kafka-rest:6.0.1
    restart: on-failure
    hostname: kafka-rest-proxy
    container_name: rest_proxy
    ports:
      - "8082:8082"
    environment:
      KAFKA_REST_LISTENERS: http://0.0.0.0:8082/
      KAFKA_REST_SCHEMA_REGISTRY_URL: http://kafka-schema-registry:8081/
      KAFKA_REST_HOST_NAME: kafka-rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: PLAINTEXT://kafka1:19092,PLAINTEXT://kafka2:19093,PLAINTEXT://kafka3:19094
    depends_on:
      zoo1:
        condition: service_healthy
      zoo2:
        condition: service_healthy
      zoo3:
        condition: service_healthy
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
      kafka-schema-registry:
        condition: service_healthy
    healthcheck:
      test: "exit 0"

  kafka-topics-ui:
    image: landoop/kafka-topics-ui:latest
    restart: on-failure
    hostname: kafka-topics-ui
    container_name: topics_ui
    ports:
      - "8000:8000"
    environment:
      KAFKA_REST_PROXY_URL: "http://kafka-rest-proxy:8082/"
      PROXY: "true"
    depends_on:
      - zoo1
      - zoo2
      - zoo3
      - kafka1
      - kafka2
      - kafka3
      - kafka-schema-registry
      - kafka-rest-proxy

  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:6.0.1
    restart: on-failure
    hostname: ksqldb-server
    container_name: ksqldb-server
    ports:
      - "8088:8088"
    environment:
      KSQL_BOOTSTRAP_SERVERS: PLAINTEXT://kafka1:19092,PLAINTEXT://kafka2:19093,PLAINTEXT://kafka3:19094
      KSQL_HOST_NAME: ksqldb-server
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://kafka-schema-registry:8081"
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    healthcheck:
      test: "exit 0"
      interval: 20s
      start_period: 10s     
  kafka-connect:
    image: confluentinc/cp-kafka-connect:6.0.1
    restart: on-failure
    container_name: kafka-connect
    hostname: kafka-connect
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka1:19092,PLAINTEXT://kafka2:19093,PLAINTEXT://kafka3:19094"
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: kafka-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: __docker-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: __docker-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: __docker-connect-status
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://kafka-schema-registry:8081'
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://kafka-schema-registry:8081'
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "2"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "2"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "2"
      CONNECT_PLUGIN_PATH: '/usr/share/java,/etc/kafka-connect/jars'
    volumes:
      - ./USDE-project/connectors:/etc/kafka-connect/jars/
      - ./USDE-project/connectors/input/:/tmp/input_files
    depends_on:
      zoo1:
        condition: service_healthy
      zoo2:
        condition: service_healthy
      zoo3:
        condition: service_healthy
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
      kafka-schema-registry     :
        condition: service_healthy
    healthcheck:
      test: "exit 0"
      interval: 15s
      start_period: 10s
  ksqldb-cli:
    image: confluentinc/cp-ksqldb-cli:6.0.1
    restart: on-failure
    container_name: ksqldb-cli
    entrypoint: /bin/sh
    tty: true
    depends_on:
      ksqldb-server:
        condition: service_healthy
      
  control-center:
    image: confluentinc/cp-enterprise-control-center:6.0.1
    restart: on-failure
    hostname: control-center
    container_name: control-center
    ports:
      - "9021:9021"
    environment:
      PORT: 9021
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'PLAINTEXT://kafka1:19092,PLAINTEXT://kafka2:19093,PLAINTEXT://kafka3:19094'
      CONTROL_CENTER_CONNECT_CLUSTER: 'kafka-connect:8083'
      CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://kafka-schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: "2"
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: "2"
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: "2"
      CONTROL_CENTER_METRICS_TOPIC_REPLICATION: "2"
      CONTROL_CENTER_METRICS_TOPIC_PARTITIONS: "2"
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
      kafka-schema-registry:
        condition: service_healthy
      ksqldb-server:
        condition: service_healthy
      kafka-connect:
        condition: service_healthy
  influxdb:
    image: quay.io/influxdb/influxdb:v2.0.2
    hostname: influxdb
    restart: on-failure
    container_name: influxdb
    ports:
      - "8086:8086"
  influxdb-sidecar-setup:
    image: emanuelefalzone/influxdb-sidecar-setup:1.0.1
    hostname: influxdb-sidecar-setup
    container_name: influxdb-sidecar-setup
    environment:
      INFLUX_HOSTNAME: influxdb
      INFLUX_USERNAME: admin
      INFLUX_PASSWORD: quantia-analytics
      INFLUX_TOKEN: "d2VsY29tZQ=="
      INFLUX_ORGANIZATION: usde
      INFLUX_BUCKET: usde_project
      INFLUX_RETENTION_PERIOD: 0
      INFLUX_PORT: 8086        